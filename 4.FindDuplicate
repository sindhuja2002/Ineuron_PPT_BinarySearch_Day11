#question 4
def findDuplicate(nums):
    slow = nums[0]
    fast = nums[0]

    # Find the intersection point of the two pointers
    while True:
        slow = nums[slow]
        fast = nums[nums[fast]]
        if slow == fast:
            break

    # Move the slow pointer to the start of the array
    slow = nums[0]

    # Find the entrance to the cycle (repeated number)
    while slow != fast:
        slow = nums[slow]
        fast = nums[fast]

    return slow

# Test cases
print(findDuplicate([1, 3, 4, 2, 2]))  # Output: 2
print(findDuplicate([3, 1, 3, 4, 2]))  # Output: 3


#TC - O(n)
#SC - O(1)
